package com.vigorchip.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vigorchip.db.entity.FoodBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tb_food".
*/
public class FoodBeanDao extends AbstractDao<FoodBean, Long> {

    public static final String TABLENAME = "tb_food";

    /**
     * Properties of entity FoodBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Count = new Property(1, String.class, "count", false, "COUNT");
        public final static Property Cur_step = new Property(2, String.class, "cur_step", false, "CUR_STEP");
        public final static Property Fid = new Property(3, String.class, "fid", false, "FID");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Person = new Property(5, String.class, "person", false, "PERSON");
        public final static Property Totlestep = new Property(6, String.class, "totlestep", false, "TOTLESTEP");
        public final static Property Unit = new Property(7, String.class, "unit", false, "UNIT");
    };


    public FoodBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FoodBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tb_food\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"COUNT\" TEXT," + // 1: count
                "\"CUR_STEP\" TEXT," + // 2: cur_step
                "\"FID\" TEXT," + // 3: fid
                "\"NAME\" TEXT," + // 4: name
                "\"PERSON\" TEXT," + // 5: person
                "\"TOTLESTEP\" TEXT," + // 6: totlestep
                "\"UNIT\" TEXT);"); // 7: unit
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tb_food\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FoodBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String count = entity.getCount();
        if (count != null) {
            stmt.bindString(2, count);
        }
 
        String cur_step = entity.getCur_step();
        if (cur_step != null) {
            stmt.bindString(3, cur_step);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(4, fid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String person = entity.getPerson();
        if (person != null) {
            stmt.bindString(6, person);
        }
 
        String totlestep = entity.getTotlestep();
        if (totlestep != null) {
            stmt.bindString(7, totlestep);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(8, unit);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FoodBean readEntity(Cursor cursor, int offset) {
        FoodBean entity = new FoodBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // count
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cur_step
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // person
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // totlestep
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // unit
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FoodBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCur_step(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPerson(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTotlestep(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUnit(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FoodBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FoodBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
