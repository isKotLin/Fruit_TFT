package com.vigorchip.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vigorchip.db.entity.ActionBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tb_action".
*/
public class ActionBeanDao extends AbstractDao<ActionBean, Long> {

    public static final String TABLENAME = "tb_action";

    /**
     * Properties of entity ActionBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Fid = new Property(1, String.class, "fid", false, "FID");
        public final static Property Person = new Property(2, String.class, "person", false, "PERSON");
        public final static Property Stime = new Property(3, String.class, "stime", false, "STIME");
        public final static Property Etime = new Property(4, String.class, "etime", false, "ETIME");
        public final static Property Method = new Property(5, String.class, "method", false, "METHOD");
        public final static Property Totletime = new Property(6, String.class, "totletime", false, "TOTLETIME");
        public final static Property Startspeed = new Property(7, String.class, "startspeed", false, "STARTSPEED");
        public final static Property Endspeed = new Property(8, String.class, "endspeed", false, "ENDSPEED");
        public final static Property Cur_step = new Property(9, String.class, "cur_step", false, "CUR_STEP");
        public final static Property Totlestep = new Property(10, String.class, "totlestep", false, "TOTLESTEP");
    };


    public ActionBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ActionBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tb_action\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FID\" TEXT," + // 1: fid
                "\"PERSON\" TEXT," + // 2: person
                "\"STIME\" TEXT," + // 3: stime
                "\"ETIME\" TEXT," + // 4: etime
                "\"METHOD\" TEXT," + // 5: method
                "\"TOTLETIME\" TEXT," + // 6: totletime
                "\"STARTSPEED\" TEXT," + // 7: startspeed
                "\"ENDSPEED\" TEXT," + // 8: endspeed
                "\"CUR_STEP\" TEXT," + // 9: cur_step
                "\"TOTLESTEP\" TEXT);"); // 10: totlestep
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tb_action\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ActionBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(2, fid);
        }
 
        String person = entity.getPerson();
        if (person != null) {
            stmt.bindString(3, person);
        }
 
        String stime = entity.getStime();
        if (stime != null) {
            stmt.bindString(4, stime);
        }
 
        String etime = entity.getEtime();
        if (etime != null) {
            stmt.bindString(5, etime);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(6, method);
        }
 
        String totletime = entity.getTotletime();
        if (totletime != null) {
            stmt.bindString(7, totletime);
        }
 
        String startspeed = entity.getStartspeed();
        if (startspeed != null) {
            stmt.bindString(8, startspeed);
        }
 
        String endspeed = entity.getEndspeed();
        if (endspeed != null) {
            stmt.bindString(9, endspeed);
        }
 
        String cur_step = entity.getCur_step();
        if (cur_step != null) {
            stmt.bindString(10, cur_step);
        }
 
        String totlestep = entity.getTotlestep();
        if (totlestep != null) {
            stmt.bindString(11, totlestep);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ActionBean readEntity(Cursor cursor, int offset) {
        ActionBean entity = new ActionBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // person
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // stime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // etime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // method
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // totletime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // startspeed
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // endspeed
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // cur_step
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // totlestep
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ActionBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPerson(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEtime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMethod(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTotletime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStartspeed(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEndspeed(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCur_step(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTotlestep(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ActionBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ActionBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
