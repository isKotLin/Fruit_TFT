package com.vigorchip.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vigorchip.db.entity.CategoryBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tb_catagory".
*/
public class CategoryBeanDao extends AbstractDao<CategoryBean, Long> {

    public static final String TABLENAME = "tb_catagory";

    /**
     * Properties of entity CategoryBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Fid = new Property(1, String.class, "fid", false, "FID");
        public final static Property Parent_id = new Property(2, String.class, "parent_id", false, "PARENT_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Bg_pic = new Property(4, String.class, "bg_pic", false, "BG_PIC");
        public final static Property Totlestep = new Property(5, String.class, "totlestep", false, "TOTLESTEP");
        public final static Property P2totletime1 = new Property(6, String.class, "p2totletime1", false, "P2TOTLETIME1");
        public final static Property P4totletime1 = new Property(7, String.class, "p4totletime1", false, "P4TOTLETIME1");
        public final static Property P6totletime1 = new Property(8, String.class, "p6totletime1", false, "P6TOTLETIME1");
        public final static Property P2totletime2 = new Property(9, String.class, "p2totletime2", false, "P2TOTLETIME2");
        public final static Property P4totletime2 = new Property(10, String.class, "p4totletime2", false, "P4TOTLETIME2");
        public final static Property P6totletime2 = new Property(11, String.class, "p6totletime2", false, "P6TOTLETIME2");
    };


    public CategoryBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CategoryBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tb_catagory\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FID\" TEXT," + // 1: fid
                "\"PARENT_ID\" TEXT," + // 2: parent_id
                "\"NAME\" TEXT," + // 3: name
                "\"BG_PIC\" TEXT," + // 4: bg_pic
                "\"TOTLESTEP\" TEXT," + // 5: totlestep
                "\"P2TOTLETIME1\" TEXT," + // 6: p2totletime1
                "\"P4TOTLETIME1\" TEXT," + // 7: p4totletime1
                "\"P6TOTLETIME1\" TEXT," + // 8: p6totletime1
                "\"P2TOTLETIME2\" TEXT," + // 9: p2totletime2
                "\"P4TOTLETIME2\" TEXT," + // 10: p4totletime2
                "\"P6TOTLETIME2\" TEXT);"); // 11: p6totletime2
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tb_catagory\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CategoryBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(2, fid);
        }
 
        String parent_id = entity.getParent_id();
        if (parent_id != null) {
            stmt.bindString(3, parent_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String bg_pic = entity.getBg_pic();
        if (bg_pic != null) {
            stmt.bindString(5, bg_pic);
        }
 
        String totlestep = entity.getTotlestep();
        if (totlestep != null) {
            stmt.bindString(6, totlestep);
        }
 
        String p2totletime1 = entity.getP2totletime1();
        if (p2totletime1 != null) {
            stmt.bindString(7, p2totletime1);
        }
 
        String p4totletime1 = entity.getP4totletime1();
        if (p4totletime1 != null) {
            stmt.bindString(8, p4totletime1);
        }
 
        String p6totletime1 = entity.getP6totletime1();
        if (p6totletime1 != null) {
            stmt.bindString(9, p6totletime1);
        }
 
        String p2totletime2 = entity.getP2totletime2();
        if (p2totletime2 != null) {
            stmt.bindString(10, p2totletime2);
        }
 
        String p4totletime2 = entity.getP4totletime2();
        if (p4totletime2 != null) {
            stmt.bindString(11, p4totletime2);
        }
 
        String p6totletime2 = entity.getP6totletime2();
        if (p6totletime2 != null) {
            stmt.bindString(12, p6totletime2);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CategoryBean readEntity(Cursor cursor, int offset) {
        CategoryBean entity = new CategoryBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // parent_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bg_pic
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // totlestep
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // p2totletime1
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // p4totletime1
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // p6totletime1
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // p2totletime2
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // p4totletime2
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // p6totletime2
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CategoryBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParent_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBg_pic(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTotlestep(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setP2totletime1(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setP4totletime1(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setP6totletime1(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setP2totletime2(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setP4totletime2(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setP6totletime2(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CategoryBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CategoryBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
